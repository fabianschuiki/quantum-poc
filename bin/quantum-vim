#!/usr/bin/php
<?php
/* Copyright Â© 2013 Fabian Schuiki */
require_once __DIR__."/../source/autoload.php";

//Get the path to the information quantum the user wants to edit.
if ($argc < 2) {
	echo "usage: {$argv[0]} INFO_QUANTUM\n";
	exit;
}
$path = $argv[1];

//Connect to the quantum server.
$socketPath = "/tmp/quantum.sock";
$raw_socket = socket_create(AF_UNIX, SOCK_STREAM, 0);
if (!$raw_socket) {
	throw new \RuntimeException("Unable to create socket.");
}
if (!socket_connect($raw_socket, $socketPath)) {
	throw new \RuntimeException("Unable to connect to $socketPath.");
}
$socket = new FrameSocket($raw_socket, "handleFrame");

//Setup an IQ change callback that sends altered information objects back to the server.
Information\Quantum::$changeCallback = function (Information\Quantum $quantum) use ($socket) {
	echo "Altered $quantum.\n";
	$request = new stdClass;
	$request->type = "SET STRING";
	$request->rid = 2;
	$request->id = $quantum->getId();
	$request->string = $quantum->getString();
	$socket->writeFrame(new Frame (1, json_encode($request)));
};

//Request the information object.
$request = new stdClass;
$request->rid = 1;
$request->type = "GET";
$request->path = $path;
$request->as = "string";
$socket->writeFrame(new Frame (1, json_encode($request)));

//Enter the main loop.
while (true) {
	$r = array($raw_socket);
	$w = ($socket->wantsToWrite() ? array($raw_socket) : array());
	$e = null;
	socket_select($r, $w, $e, null);
	if (in_array($raw_socket, $r, true)) if (!$socket->read()) exit;
	if (in_array($raw_socket, $w, true)) $socket->write();
}

exit;

//Wait for the response.
$responseRaw = fread($socket, 1024);
$response = unserialize($responseRaw);
if ($response->type === "FAIL") {
	die("Quantum Server: {$response->message}\n");
}
$iq = $response->payload;
echo "Received: $iq\n";

//Edit the information quantum.
$tmpFile = "/tmp/information_quantum";
file_put_contents($tmpFile, $iq->getString());
passthru("vim ".escapeshellarg($tmpFile));
$iq->setString(file_get_contents($tmpFile));

function handleFrame(Frame $frame, FrameSocket $socket)
{
	if ($frame->getType() === 255) {
		die("Server Error: {$frame->getData()}\n");
	}
	if ($frame->getType() !== 1) {
		throw new \RuntimeException("Server sent frame of type {$frame->getType()}, but only frame types 1 and 255 are supported.");
	}

	//Decode the response.
	$response = json_decode($frame->getData());
	if (!$response) {
		throw new \RuntimeException("Server sent invalid JSON response: {$frame->getData()}");
	}
	print_r($response);

	//If we just received the information quantum, keep it around for editing.
	global $quantum;
	if ($response->rid == 1 && $response->type == "SET") {
		$quantum = Information\Serializer::decode($response->iq);
		if (!$quantum) {
			throw new \RuntimeException("Unable to decode {$response->iq}.");
		}
		echo "Decoded $quantum\n";

		//Edit the quantum.
		$tmpFile = "/tmp/information_quantum";
		$str = $quantum->getString();
		file_put_contents($tmpFile, $str);
		passthru("vim ".escapeshellarg($tmpFile));
		$str = file_get_contents($tmpFile);
		$quantum->setString($str);
	}
	if ($response->rid == 2) {
		echo "Quantum saved. Exiting.\n";
		exit;
	}
}
